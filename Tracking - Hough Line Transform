
################################################################################
######################### Lane Detection and Determination #####################
################################################################################


import numpy as np
import cv2

cap = cv2.VideoCapture('pa0001.MP4')
fourcc = cv2.VideoWriter_fourcc(*'XVID')

while True:
    _, frame = cap.read()

    roi1 = frame[90:280,5:355]
    roi2 = frame[90:280,375:725]

    
    grey1 = cv2.cvtColor(roi1, cv2.COLOR_BGR2GRAY)
    grey2 = cv2.cvtColor(roi2, cv2.COLOR_BGR2GRAY)

##Color Filtering        

    lower = np.array([200])
    upper = np.array([255])

    mask1 = cv2.inRange(grey1, lower, upper)
##    mask2 = cv2.inRange(grey2, lower, upper)

    res1 = cv2.bitwise_and(grey1, grey1, mask = mask1)
##    res2 = cv2.bitwise_and(grey2, grey2, mask = mask2)

    Kernel = np.ones((3,3), np.uint8)
## Morphological Transformation
    
##    blur = cv2.GaussianBlur(res1, (15,15), 0)
##    erosion = cv2.erode(res1, Kernel, iterations = 1)
##    dilation = cv2.dilate(res1, Kernel, iterations = 1)

####Edge Detection

    edge1 = cv2.Canny(res1, 10, 10, apertureSize = 3)
##    edge2 = cv2.Canny(res2, 10, 10, apertureSize = 3)
    
##Hough Line Transform

##First Camera (Front Left)
    font = cv2.FONT_HERSHEY_SIMPLEX
    lines1 = cv2.HoughLines(edge1,5,np.pi/180,10)
    points1 = [[]]
    for i in range(0,len(lines1)):
        for rho1,theta1 in lines1[i]:
            a1 = np.cos(theta1)
            b1 = np.sin(theta1)
            x10 = a1*rho1
            y10 = b1*rho1
            x11 = int(x10 + 1000*(-b1))
            y11 = int(y10 + 1000*(a1))
            x12 = int(x10 - 1000*(-b1))
            y12 = int(y10 - 1000*(a1))
            points1[0].append((x11, y11, x12, y12))
            print(points1)
            cv2.line(roi1,(x11,y11),(x12,y12),(0,0,255),4)

##        c1 = (x11 + x12)/2
##        if c1 <= -100:
##            cv2.putText(frame, 'Lane 2', (20,250), font, 1.5, (200, 0,50), 5, cv2.LINE_AA)
##        else:
##            cv2.putText(frame, 'Lane 1', (20,250), font, 1.5, (200, 0,50), 5, cv2.LINE_AA)
        
####Second Camera (Front Rightt)
        
##    lines2 = cv2.HoughLines(edge2,5,np.pi/180,10)
##    points2 = [[]]
##    for rho2,theta2 in lines2[0]:
##        a2 = np.cos(theta2)
##        b2 = np.sin(theta2)
##        x20 = a2*rho2
##        y20 = b2*rho2
##        x21 = int(x20 + 1000*(-b2))
##        y21 = int(y20 + 1000*(a2))
##        x22 = int(x20 - 1000*(-b2))
##        y22 = int(y20 - 1000*(a2))
##        points2[0].append((x21, y21, x22, y22))
##        print(points2)
##        cv2.line(roi2,(x21,y21),(x22,y22),(0,0,255),4)

        
##        c = (x1 + x2)/2
##        if c <= -100:
##            cv2.putText(frame, 'Lane 2', (20,250), font, 1.5, (200, 0,50), 5, cv2.LINE_AA)
##        else:
##            cv2.putText(frame, 'Lane 1', (20,250), font, 1.5, (200, 0,50), 5, cv2.LINE_AA)
                
        

    cv2.imshow('frame', frame)
    cv2.imshow('result', res1)
    cv2.imshow('Edges1', edge1)
##    cv2.imshow('Edges2', edge2)
##    cv2.imshow('Erosion', erosion)
##    cv2.imshow('Dilation', dilation)

    k = cv2.waitKey(1) & 0xFF
    if  k == 27:
         break

cap.release()
cv2.destroyAllWindows()
